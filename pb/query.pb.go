// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/query.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Query struct {
	PageSize int32  `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize" validate:"required"`
	Page     int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page" validate:"required"`
	Sorted   []byte `protobuf:"bytes,3,opt,name=sorted,proto3" json:"sorted"`
	Filtered []byte `protobuf:"bytes,4,opt,name=filtered,proto3" json:"filtered"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_5958159b9fcae252, []int{0}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Query.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return m.Size()
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Query)(nil), "pb.Query")
	golang_proto.RegisterType((*Query)(nil), "pb.Query")
}

func init() { proto.RegisterFile("pb/query.proto", fileDescriptor_5958159b9fcae252) }
func init() { golang_proto.RegisterFile("pb/query.proto", fileDescriptor_5958159b9fcae252) }

var fileDescriptor_5958159b9fcae252 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x50, 0x3d, 0x4e, 0xc3, 0x30,
	0x14, 0x8e, 0x4b, 0x5b, 0x55, 0x56, 0xc5, 0x10, 0x96, 0x08, 0x24, 0xbb, 0x0a, 0x4b, 0x17, 0xe2,
	0xa1, 0x1b, 0x0b, 0x52, 0x6f, 0x40, 0xd9, 0xd8, 0xe2, 0xe4, 0xd5, 0xb5, 0xd4, 0xc6, 0xae, 0xeb,
	0x20, 0xc1, 0x09, 0x18, 0x39, 0x12, 0x63, 0x25, 0x96, 0x8c, 0x4c, 0x11, 0x4d, 0xb6, 0x8c, 0x9c,
	0x00, 0xc5, 0x2d, 0x11, 0x0b, 0x93, 0xbf, 0x5f, 0xeb, 0xe9, 0xc3, 0xe7, 0x9a, 0xb3, 0x6d, 0x0e,
	0xe6, 0x39, 0xd2, 0x46, 0x59, 0xe5, 0xf7, 0x34, 0xbf, 0xbc, 0x11, 0xd2, 0xae, 0x72, 0x1e, 0x25,
	0x6a, 0xc3, 0x84, 0x12, 0x8a, 0x39, 0x8b, 0xe7, 0x4b, 0xc7, 0x1c, 0x71, 0xe8, 0x58, 0x09, 0x3f,
	0x10, 0x1e, 0xdc, 0xb7, 0x5f, 0xf8, 0x77, 0x78, 0xa4, 0x63, 0x01, 0x0f, 0xf2, 0x05, 0x02, 0x34,
	0x41, 0xd3, 0xc1, 0xfc, 0xba, 0x29, 0x69, 0xa7, 0x7d, 0x97, 0xf4, 0xe2, 0x29, 0x5e, 0xcb, 0x34,
	0xb6, 0x70, 0x1b, 0x1a, 0xd8, 0xe6, 0xd2, 0x40, 0x1a, 0x2e, 0xba, 0x80, 0x3f, 0xc3, 0xfd, 0x16,
	0x07, 0x3d, 0x57, 0xa6, 0x4d, 0x49, 0x1d, 0xff, 0xaf, 0xe8, 0x4c, 0x3f, 0xc4, 0xc3, 0x9d, 0x32,
	0x16, 0xd2, 0xe0, 0x6c, 0x82, 0xa6, 0xe3, 0x39, 0x6e, 0x4a, 0x7a, 0x52, 0x16, 0xa7, 0xd7, 0x9f,
	0xe2, 0xd1, 0x52, 0xae, 0x2d, 0x18, 0x48, 0x83, 0xbe, 0x4b, 0x8d, 0xdb, 0xcb, 0x7e, 0xb5, 0x45,
	0x87, 0xe6, 0xb0, 0x3f, 0x10, 0xaf, 0x38, 0x10, 0x6f, 0x5f, 0x11, 0x54, 0x54, 0x04, 0x7d, 0x55,
	0x04, 0xbd, 0xd5, 0xc4, 0x7b, 0xaf, 0x09, 0x2a, 0x6a, 0xe2, 0x7d, 0xd6, 0xc4, 0xc3, 0x57, 0x49,
	0x16, 0x2d, 0x95, 0x49, 0x56, 0x71, 0x26, 0x20, 0xe2, 0xf1, 0x0e, 0xda, 0xb5, 0x36, 0x2a, 0x8b,
	0x34, 0x7f, 0xa4, 0x42, 0xda, 0x3f, 0x6e, 0x92, 0xb1, 0x36, 0xc0, 0x8e, 0x01, 0xa6, 0xf9, 0x2b,
	0x42, 0x7c, 0xe8, 0xb6, 0x9b, 0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xe8, 0xee, 0x98, 0x80,
	0x01, 0x00, 0x00,
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filtered) > 0 {
		i -= len(m.Filtered)
		copy(dAtA[i:], m.Filtered)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Filtered)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sorted) > 0 {
		i -= len(m.Sorted)
		copy(dAtA[i:], m.Sorted)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sorted)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.PageSize != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovQuery(uint64(m.PageSize))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	l = len(m.Sorted)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Filtered)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sorted", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sorted = append(m.Sorted[:0], dAtA[iNdEx:postIndex]...)
			if m.Sorted == nil {
				m.Sorted = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filtered", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filtered = append(m.Filtered[:0], dAtA[iNdEx:postIndex]...)
			if m.Filtered == nil {
				m.Filtered = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
